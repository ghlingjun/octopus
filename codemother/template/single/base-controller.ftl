package ${controllerBasePackage};<#include "../inc-java-type.ftl" /><#include "../inc-macro.ftl" />
/*
 * This file is generated by codemother. Don't modify this file.
 * Modify subclass to implement more functions.
 */
import com.primeco.base.BaseCtl;
import ${modelPackage}.${schema.modelName};
import ${servicePackage}.${schema.modelName}Service;
<#list schema.normalColumnDefList as columnDef >
    <#if columnDef.name == 'created_by'>
import com.primeco.security.ShiroUtils;
import com.primeco.utils.DateTimeUtils;
    </#if>
</#list>
import com.primeco.utils.AjaxResult;
import com.primeco.utils.PrimecoStringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Base${schema.modelName}Ctl extends BaseCtl {
    @Autowired
    protected ${schema.modelName}Service modelSvc;

    /**
     * Init page request
     */
    @RequestMapping("/init")
    public ModelAndView init(ModelAndView mav) {
        return mav;
    }

    /**
     * return ajax list all
     */
    @ResponseBody
    @RequestMapping("/ajax-list-all")
    public AjaxResult ajaxListAll(
        <#lt><#if schema.defaultConditionList?size gt 0 ><#list schema.defaultConditionList as searchCond>
            <#if searchCond.type == "between">
                @RequestParam(required = false) ${searchCond.searchType} ${searchCond.low},
                @RequestParam(required = false) ${searchCond.searchType} ${searchCond.high}<#rt>
            <#elseif searchCond.type == "match-value">
                @RequestParam(defaultValue = "${searchCond.value}") ${searchCond.searchType} ${searchCond.param}<#rt>
            <#else>
                @RequestParam(required = false) ${searchCond.searchType} ${searchCond.param}<#rt>
            </#if>
            <#lt /><#if searchCond_has_next>,</#if>
        </#list></#if>
    ) {
        Map<String, Object> map = new HashMap<>();
        <#if schema.defaultConditionList?size gt 0 ><#list schema.defaultConditionList as searchCond>
            <#if searchCond.type == "between">
        map.put("${searchCond.low}", ${searchCond.low});
        map.put("${searchCond.high}", ${searchCond.high});
            <#elseif searchCond.type == "in">
        if(PrimecoStringUtils.isNotEmpty(${searchCond.param})) {
            map.put("${searchCond.param}", ${searchCond.param}.split(","));
        } else {
            map.put("${searchCond.param}", ${searchCond.param});
        }
            <#else>
        map.put("${searchCond.param}", ${searchCond.param});
            </#if>
        </#list></#if>
        // Get the data
        List<${schema.modelName}> data = modelSvc.listBy(map);
        // set the return values
        map.put("data", data);

        return AjaxResult.createSuccess(map);
    }

    /**
     * return ajax table by page
     */
    @ResponseBody
    @RequestMapping("/ajax-list")
    public AjaxResult ajaxList(@RequestParam(defaultValue = "0") int offset,
                               @RequestParam(defaultValue = "") int pageSize<#if schema.defaultConditionList?size gt 0 >,
                    <#list schema.defaultConditionList as searchCond>
                        <#if searchCond.type == "between">
                               @RequestParam(required = false) ${searchCond.searchType} ${searchCond.low},
                               @RequestParam(required = false) ${searchCond.searchType} ${searchCond.high}<#rt>
                        <#elseif searchCond.type == "match-value">
                               @RequestParam(defaultValue = "${searchCond.value}") ${searchCond.searchType} ${searchCond.param}<#rt>
                        <#else>
                               @RequestParam(required = false) ${searchCond.searchType} ${searchCond.param}<#rt>
                        </#if><#t>
                        <#lt /><#if searchCond_has_next>,</#if>
                    </#list></#if>
    ) {
        Map<String, Object> map = new HashMap<>();
        <#if schema.defaultConditionList?size gt 0 ><#list schema.defaultConditionList as searchCond>
            <#if searchCond.type == "between">
        map.put("${searchCond.low}", ${searchCond.low});
        map.put("${searchCond.high}", ${searchCond.high});
            <#elseif searchCond.type == "in">
        if(PrimecoStringUtils.isNotEmpty(${searchCond.param})) {
            map.put("${searchCond.param}", ${searchCond.param}.split(","));
        } else {
            map.put("${searchCond.param}", ${searchCond.param});
        }
            <#else>
        map.put("${searchCond.param}", ${searchCond.param});
            </#if>
        </#list></#if>
        // Get the total of records
        int total = modelSvc.countBy(map);
        // Get the data
        map.put("offset", offset);
        map.put("pageSize", pageSize);
        List<${schema.modelName}> data = modelSvc.listBy(map);
        // set the return values
        map.put("total", total);
        map.put("data", data);

        return AjaxResult.createSuccess(map);
    }

    /**
     * Request for creating a entity
     */
    @RequestMapping("/create")
    public ModelAndView toCreate(ModelAndView mav) {
        return mav;
    }

    /**
    * Request for insertting a entity
    */
    @ResponseBody
    @RequestMapping("/cm/insert")
    public AjaxResult doInsert(@ModelAttribute ${schema.modelName} model) {
        try {
<#list schema.normalColumnDefList as columnDef >
    <#if columnDef.name == 'created_by'>
            model.setCreatedBy(ShiroUtils.getUsername());
            model.setCreatedAt(DateTimeUtils.getTimestamp());
    </#if>
    <#if columnDef.name == 'updated_by'>
            model.setUpdatedBy(ShiroUtils.getUsername());
            model.setUpdatedAt(DateTimeUtils.getTimestamp());
    </#if>
</#list>
            modelSvc.insert(model);
        } catch (Exception e) {
            return AjaxResult.createError(e.getMessage());
        }
        return AjaxResult.SUCCESS;
    }

    <#if !schema.key.complex>
    /**
     * Return the ajax entity data
     */
    @ResponseBody
    @RequestMapping("/ajax-entity")
    public AjaxResult getEntity(@RequestParam ${config.toShortJavaType(schema.key)} id) {
        try {
            ${schema.modelName} model = modelSvc.getByKey(id);
            return AjaxResult.createSuccess(model);
        } catch (Exception e) {
            return AjaxResult.createError(e.getMessage());
        }
    }
    </#if>

    /**
     * Request for delete a entity
     */
    @ResponseBody
    @RequestMapping("/cm/delete")
    public AjaxResult doDelete(<#if !schema.key.complex>@RequestParam ${config.toShortJavaType(schema.key)} key<#else>
        <#list schema.key.columnDefList as columnDef >@RequestParam("${columnDef.javaName}") ${config.toShortJavaType(columnDef)} ${columnDef.javaName}<#if columnDef_has_next>,</#if><#rt /></#list></#if>) {
        try {
            modelSvc.deleteByKey(<#if !schema.key.complex>key<#else>
                <#list schema.key.columnDefList as columnDef >${columnDef.javaName}<#if columnDef_has_next>,</#if><#rt /></#list></#if>);
        } catch (Exception e) {
            return AjaxResult.createError(e.getMessage());
        }
        return AjaxResult.SUCCESS;
    }

}
